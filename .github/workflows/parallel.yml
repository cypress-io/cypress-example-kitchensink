# GitHub Actions
# https://help.github.com/en/articles/configuring-a-workflow
# good list of examples at http://www.thedreaming.org/2019/09/10/github-ci/
name: Cypress parallel tests

on: push

jobs:
  install:
    name: Install NPM and Cypress
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # just so we learn about available environment variables GitHub provides
      - name: Print env variables
        run: |
          npm i -g @bahmutov/print-env
          print-env GITHUB
          print-env BUILD
          print-env ACTIONS
          cat $GITHUB_EVENT_PATH

      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#contexts
      - name: Print job object
        run: echo '${{ toJson(job) }}'

      - name: Print steps object
        run: echo '${{ toJson(steps) }}'

      - name: Print runner object
        run: echo '${{ toJson(runner) }}'

      - name: Print strategy object
        run: echo '${{ toJson(strategy) }}'

      - name: Print matrix object
        run: echo '${{ toJson(matrix) }}'

      # Restore the previous NPM modules and Cypress binary archives.
      # Any updated archives will be saved automatically after the entire
      # workflow successfully finishes.
      # See https://github.com/actions/cache
      - name: Cache central NPM modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-

      # Cache local node_modules to pass to testing jobs
      - name: Cache local node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: install dependencies and verify Cypress
        env:
          # make sure every Cypress install prints minimal information
          CI: 1
        run: |
          npm ci
          npx cypress verify

  # Duplicate job definitions - GitHub YAML does not support
  # anchor definitions yet, thus we cannot put same steps into a template object yet
  test1:
    name: Cypress test 1
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@master

      # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # Restore just local node_modules and the Cypress binary archives.
      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-

      - name: Cache local node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Starts local server, then runs Cypress tests and records results on the dashboard
      # We can use the workflow name and commit SHA to tie multiple jobs together
      - name: Cypress tests
        run: |
          npm start &
          npx cypress run --record --parallel --group "Parallel 2x" --ci-build-id "$GITHUB_WORKFLOW-$GITHUB_SHA"
        env:
          # place your secret record key at
          # https://github.com/cypress-io/cypress-example-kitchensink/settings/secrets
          CYPRESS_RECORD_KEY: ${{ secrets.dashboardRecordKey }}
          TERM: xterm

      # Save videos and screenshots as test artifacts
      # https://github.com/actions/upload-artifact
      - uses: actions/upload-artifact@master
        # there might be no screenshots created when:
        # - there are no test failures
        # so only upload screenshots if previous step has failed
        if: failure()
        with:
          name: screenshots
          path: cypress/screenshots
      # video should always be generated
      - uses: actions/upload-artifact@master
        with:
          name: videos
          path: cypress/videos

  test2:
    name: Cypress test 2
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@master

      # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # Restore just local node_modules and the Cypress binary archives.
      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-

      - name: Cache local node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Starts local server, then runs Cypress tests and records results on the dashboard
      # We can use the workflow name and commit SHA to tie multiple jobs together
      - name: Cypress tests
        run: |
          npm start &
          npx cypress run --record --parallel --group "Parallel 2x" --ci-build-id "$GITHUB_WORKFLOW-$GITHUB_SHA"
        env:
          # place your secret record key at
          # https://github.com/cypress-io/cypress-example-kitchensink/settings/secrets
          CYPRESS_RECORD_KEY: ${{ secrets.dashboardRecordKey }}
          TERM: xterm

      # Save videos and screenshots as test artifacts
      # https://github.com/actions/upload-artifact
      - uses: actions/upload-artifact@master
        # there might be no screenshots created when:
        # - there are no test failures
        # so only upload screenshots if previous step has failed
        if: failure()
        with:
          name: screenshots
          path: cypress/screenshots
      # video should always be generated
      - uses: actions/upload-artifact@master
        with:
          name: videos
          path: cypress/videos
